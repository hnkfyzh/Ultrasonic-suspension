module pll_top(
	 input	    clk       ,
	 input	    rst_n     ,
	 output	    clk_out   ,
	 output      wav0_0    ,
	 output      wav0_1    ,
	 output      wav0_2    ,
	 output      wav0_3    ,
	 output      wav1_0    ,
	 output      wav1_1    ,
	 output      wav1_2    ,
	 output      wav1_3    ,
	 output      wav2_0    ,
	 output      wav2_1    ,
	 output      wav2_2    ,
	 output      wav2_3    ,
	 output      wav3_0    ,
	 output      wav3_1    ,
	 output      wav3_2    ,
	 output      wav3_3    
	 
	 );
	 reg [9:0]   rom_addr[3:0][3:0];//循环读取地址0~1023
	 reg [9:0]   addr[3:0][3:0]  ;
	 reg   [9:0]   delay[3:0][3:0] ;//延时调节相位，数据由上位机通信发给FPGA，0~1023表示0~360度 
    wire  rom_data[3:0][3:0];//从相应地址位置读出的数据（波形）

assign wav0_0=rom_data[0][0]     ;//将波形输出与数据连接
assign wav0_1=rom_data[0][1]     ; 
assign wav0_2=rom_data[0][2]     ;
assign wav0_3=rom_data[0][3]     ;
assign wav1_0=rom_data[1][0]    ;
assign wav1_1=rom_data[1][1]     ;
assign wav1_2=rom_data[1][2]    ;
assign wav1_3=rom_data[1][3]     ;
assign wav2_0=rom_data[2][0]     ;
assign wav2_1=rom_data[2][1]     ;
assign wav2_2=rom_data[2][2]     ;
assign wav2_3=rom_data[2][3]    ;
assign wav3_0=rom_data[3][0]    ;
assign wav3_1=rom_data[3][1]     ;
assign wav3_2=rom_data[3][2]     ;
assign wav3_3=rom_data[3][3]     ;

always @(negedge clk_out)
begin
integer      i ;
integer      j ;
     for(i=0; i<=3; i=i+1) begin
	      for(j=0; j<=3; j=j+1)
			   begin
				rom_addr[i][j] = addr[i][j] + delay[i][j];
				addr[i][j] = addr[i][j] + 1'b1;
				end
	  end

end 

PLL UPLL(
    .areset	   (1'b0)      ,
	 .inclk0	   (clk)       ,
	 .c0		   (clk_out)   ,
	 .locked    ()
	 );
	

pwm Uwav0_0 (
    .clock	   (clk_out)      , 
    .address   (rom_addr[0][0])  ,
    .q		   (rom_data[0][0]) 
);

pwm Uwav0_1 (
    .clock	   (clk_out)      ,
    .address	(rom_addr[0][1])  ,
    .q		   (rom_data[0][1]) 
);

pwm Uwav0_2 (
    .clock	   (clk_out)      ,
    .address	(rom_addr[0][2])  ,
    .q		   (rom_data[0][2]) 
);
pwm Uwav0_3 (
    .clock	   (clk_out)      ,
    .address	(rom_addr[0][3])  ,
    .q		   (rom_data[0][3]) 
);
pwm Uwav1_0 (
    .clock	   (clk_out)      ,
    .address	(rom_addr[1][0])  ,
    .q		   (rom_data[1][0]) 
);
pwm Uwav1_1 (
    .clock	   (clk_out)      ,
    .address	(rom_addr[1][1])  ,
    .q		   (rom_data[1][1]) 
);
pwm Uwav1_2 (
    .clock	   (clk_out)      ,
    .address	(rom_addr[1][2])  ,
    .q		   (rom_data[1][2]) 
);
pwm Uwav1_3 (
    .clock	   (clk_out)      ,
    .address	(rom_addr[1][3])  ,
    .q		   (rom_data[1][3]) 
);
pwm Uwav2_0 (
    .clock	   (clk_out)      ,
    .address	(rom_addr[2][0])  ,
    .q		   (rom_data[2][0]) 
);
pwm Uwav2_1 (
    .clock	   (clk_out)      ,
    .address	(rom_addr[2][1])  ,
    .q		   (rom_data[2][1]) 
);
pwm Uwav2_2 (
    .clock	   (clk_out)      ,
    .address	(rom_addr[2][2])  ,
    .q		   (rom_data[2][2]) 
);
pwm Uwav2_3 (
    .clock	   (clk_out)      ,
    .address	(rom_addr[2][3])  ,
    .q		   (rom_data[2][3]) 
);
pwm Uwav3_0 (
    .clock	   (clk_out)      ,
    .address	(rom_addr[3][0])  ,
    .q		   (rom_data[3][0]) 
);
pwm Uwav3_1 (
    .clock	   (clk_out)      ,
    .address	(rom_addr[3][1])  ,
    .q		   (rom_data[3][1]) 
);
pwm Uwav3_2 (
    .clock	   (clk_out)      ,
    .address	(rom_addr[3][2])  ,
    .q		   (rom_data[3][2]) 
);
pwm Uwav3_3 (
    .clock	   (clk_out)      ,
    .address	(rom_addr[3][3])  ,
    .q		   (rom_data[3][3]) 
);

endmodule
